plugins {
    id 'org.jetbrains.kotlin.jvm' 
    id 'application'
}

dependencies {
    implementation project(":api")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.pf4j:pf4j:${pf4jVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    api "info.picocli:picocli:${picoCliVersion}"
    implementation "org.yaml:snakeyaml:${snakeyamlVersion}"
    implementation "com.github.kittinunf.fuel:fuel:${fuelVersion}"
    implementation "com.github.kittinunf.fuel:fuel-json:${fuelVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
    testImplementation "com.github.stefanbirkner:system-lambda:1.2.1"
}

test {
    useJUnitPlatform()
}

def appMainClass = "net.corda.cli.application.BootKt"

application {
    mainClass = appMainClass
}

tasks.named("run"){
    doFirst{
        systemProperty "pf4j.pluginsDir", file(pluginsDir).absolutePath
    }
}

def fatJar = tasks.register('fatJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    dependsOn(tasks.named('jar', Jar))

    from(sourceSets.main.output)
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude "META-INF/*.EC"
        exclude "META-INF/INDEX.LIST"
        exclude "META-INF/versions/*/module-info.class"
        exclude "module-info.class"
    }

    manifest {
        attributes["Main-Class"] = appMainClass
        attributes["Multi-Release"] = true
    }

    archiveBaseName = 'corda-cli'
}

artifacts {
    archives fatJar
}
