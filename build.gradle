import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import static org.gradle.api.JavaVersion.VERSION_11

plugins {
    id 'org.jetbrains.kotlin.jvm' apply false
    id 'base'
    id 'io.gitlab.arturbosch.detekt' apply false
    id 'jacoco' // test coverage
    id 'maven-publish'
    id 'com.r3.internal.gradle.plugins.r3ArtifactoryPublish'
    id 'com.r3.internal.gradle.plugins.r3-docker' apply false
}

  
ext.pluginsDir = "$buildDir/plugins"

if (System.getenv("RELEASE_VERSION")?.trim()) {
    version = System.getenv("RELEASE_VERSION")
} else {
    def versionSuffix = '-SNAPSHOT'
    if (System.getenv('VERSION_SUFFIX')) {
        versionSuffix = System.getenv('VERSION_SUFFIX')
    }
    version = "$cliHostVersion$versionSuffix"
}

subprojects {

    group = 'net.corda.cli'
    version rootProject.version


    pluginManager.withPlugin('org.jetbrains.kotlin.jvm'){
        apply plugin: 'io.gitlab.arturbosch.detekt'

        dependencies {
            detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektPluginVersion"
        }
    }



    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            languageVersion = '1.4'
            apiVersion = '1.4'
            verbose = true
            jvmTarget = VERSION_11
            freeCompilerArgs += [
                "-Xjvm-default=all",
                "-java-parameters"
            ]
        }
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    tasks.register('compileAll') { task ->
        description = "Compiles all the Kotlin and Java classes, including all of the test classes."
        group = "verification"
        task.dependsOn tasks.withType(AbstractCompile)
    }

    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    detekt {
        config.setFrom(files("$rootDir/detekt-config.yml"))
        parallel = true
        ignoreFailures = true
        reports {
            xml {
                enabled = true
                destination = file("$projectDir/build/detekt-report.xml")
            }
            html {
                enabled = false
            }
            txt {
                enabled = false
            }
        }
    }
}

wrapper {
    gradleVersion = '7.3.2'
    distributionType = Wrapper.DistributionType.BIN
    distributionUrl="https://gradleproxy:gradleproxy@software.r3.com/artifactory/gradle-proxy/gradle-$gradleVersion-bin.zip"
}

tasks.register("generateVersionedScripts"){
    description 'Wrapper task to ensure we have the correct version specified in provided scripts'
    dependsOn cleanDir, copyScripts
}


tasks.register("cleanDir", Delete){
    description 'Removes any previously generated scripts'
    delete 'build/generatedScripts' 
}

tasks.register("copyScripts", Copy){
    mustRunAfter cleanDir
    description 'Copy corda-cli scripts to a location in build dir and update to use correct version'

    from 'script' 
    into 'build/generatedScripts' 
    filter {
            String line -> line.replaceAll("corda-cli-.(.)*.jar", "corda-cli-${version}.jar")
        }
}

// Automatically ran as part of build process
build.finalizedBy(generateVersionedScripts)
