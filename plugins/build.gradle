plugins {
    id 'base'
}

// here we define the tasks which will build the plugins in the subprojects
subprojects { subProject ->
    // we have to apply the gradle jvm plugin, because it provides the jar and build tasks
    apply plugin: "org.jetbrains.kotlin.jvm"

    // the plugin task will put the files into a zip file
    tasks.register("plugin", Jar) {
        archiveBaseName.set("plugin-${subProject.pluginId}")

        // first taking the classes generated by the jar task
        into("classes") {
            with(tasks.named("jar", Jar).get())
        }
        // and then we also need to include any libraries that are needed by the plugin
        dependsOn(configurations.runtimeClasspath)
        into("lib") {
            from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
                exclude "META-INF/*.SF"
                exclude "META-INF/*.DSA"
                exclude "META-INF/*.RSA"
                exclude "META-INF/*.EC"
                exclude "META-INF/INDEX.LIST"
                exclude "META-INF/versions/*/module-info.class"
                exclude "module-info.class"
            }
        }
        archiveExtension.set("zip")
    }

    // the assemblePlugin will copy the zip file into the common plugins directory
    tasks.register("assemblePlugin", Copy) {
        from(subProject.tasks.named("plugin"))
        into(pluginsDir)
    }

    // for the jar task we have to set the plugin properties, so they can be written to the manifest
    tasks.named("jar", Jar) {
        manifest {
            attributes["Plugin-Class"] = subProject.pluginClass
            attributes["Plugin-Id"] = subProject.pluginId
            attributes["Plugin-Version"] = archiveVersion
            attributes["Plugin-Provider"] = subProject.pluginProvider
            attributes["Plugin-Description"] = subProject.pluginDescription

        }
    }

    tasks.named("build") {
        dependsOn(tasks.named("plugin"))
    }
}

def assemblePlugins = tasks.register("assemblePlugins", Copy) {
    dependsOn(subprojects.collect { it.tasks.named("assemblePlugin") })
}

tasks.named("assemble"){
    dependsOn assemblePlugins
}
